spec code { ver = 5.6 | syn = utinax | sty = mixed }


create struct 'name' {
  define name.create(context, (option)s) [(attribute)s] {
    set name.'var1' = (option)s#1
    set name.'var2' = (option)s#2

    loop for key, value in (attribute)s {
      set name.var(key) = value
    }
  }

  define name.'test'(option) {
    func.out(name.var(option))
  }

  set 'content' = "sup"

  define struct.'view'() {
    func.out(content)
  }
}

create name('test', "sup", 2.0) [
  | opt1 = none
  | opt2 = true
  | opt3 = false
]

sys.out(test.var1 * test.var2)
sys.out(test.opt1 or test.opt2 or test.opt3)

test.test('var1')
name.content
name.view()



create struct('name') {
  define self.create(context, (option)s) [(attribute)s] {
    set self.'var1' = (option)s#1
    set self.'var2' = (option)s#2

    loop for key, value in (attribute)s {
      set self.var(key) = value
    }
  }

  create func [self] {
    define self.test(option) {
      func.out(self.var(option))
    }
  }

  set struct.'content' = "sup"

  define func [struct] {
    func.out(content)
  }
}
